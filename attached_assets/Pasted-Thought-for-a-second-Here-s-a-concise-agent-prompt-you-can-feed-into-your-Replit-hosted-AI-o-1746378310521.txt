Thought for a second


Here’s a concise “agent prompt” you can feed into your Replit-hosted AI (or any agentic bot) to implement dynamic flash-loan sizing and slippage-aware arbitrage calculations:

---

**Agent Task:**
Build a module that, given any two-token AMM pair on BNB Chain, will:

1. **Fetch On-Chain Data**

   * Query each pool’s reserves $`getReserves()`$ via Web3 (Ethers.js or Web3.py).
   * Determine the current price $P = R_B / R_A$.
   * Detect swap-fee tiers (e.g. 0.01%, 0.25%, 0.30%) by reading the pool’s fee configuration or via a subgraph.

2. **Estimate Slippage & Net Swap Output**

   * For a candidate loan amount $L_A$, compute new reserves:

     $$
     R_A' = R_A + L_A,\quad R_B' = \frac{R_A\,R_B}{R_A + L_A}
     $$
   * Gross output $\Delta B = R_B - R_B'$.
   * Slippage = $L_A / (R_A + L_A)$.
   * Net output after fee: $\Delta B_{\rm net} = \Delta B \times (1 - f)$.

3. **Simulate Round-Trip Profit**

   * Borrow $L_A$ of token A via PancakeSwap V3 flash loan.
   * Swap on DEX 1 → receive $\Delta B_{\rm net}$.
   * Swap $\Delta B_{\rm net}$ back into A on DEX 2 (same slippage/fee logic).
   * Calculate returned amount $\Delta A$.
   * Subtract repayment $(L_A \times (1 + \text{flashFeeRate}))$ and gas cost ($200k$–$300k$ gas @ 20 gwei).
   * Net profit = $\Delta A - L_A(1+\text{flashFeeRate}) - \text{gasUSD}$.

4. **Dynamic Loan-Size Optimizer**

   * Loop $L_A$ over \[1%, 3%, 5%] of pool reserve $R_A$.
   * Compute net profit for each.
   * Identify:

     * **Break-even threshold** (smallest $L_A$ where profit ≥ 0).
     * **Optimal loan size** (where profit is maximized).

5. **Output & Alerts**

   * Continuously poll every X seconds or on new blocks.
   * If profit > user-defined threshold (e.g. \$100), emit a signed flash-loan transaction bundle or notify via webhook/console.

---

**Implementation Hints:**

* Use **Ethers.js**’s `provider.getGasPrice()` + `contract.estimateGas` to compute gasUSD.
* For on-chain quote simulations, employ **callStatic** on router/quoter contracts.
* Store pool metadata (addresses, fee tiers) in a lightweight JSON or in-memory cache to minimize RPC calls.
* Wrap the arbitrage logic in a try/catch so failed bundles don’t crash the agent.

---

Feed that prompt to your Replit AI agent and it will know how to wire up Web3, perform the math, and iterate loan sizes to chase the best slippage-aware arbitrage opportunities.
