const express = require('express');
const http = require('http');
const socketIO = require('socket.io');
const path = require('path');
const logger = require('../utils/logger');
const config = require('../config');
const priceService = require('./priceService');

/**
 * Dashboard server for monitoring bot performance
 */
class DashboardServer {
  constructor() {
    this.app = express();
    this.server = http.createServer(this.app);
    this.io = socketIO(this.server);
    this.port = process.env.DASHBOARD_PORT || 5000;
    
    // Initialize with default stats
    this.initializeStats();
    
    // Initialize middleware and routes
    this.setupMiddleware();
    this.setupRoutes();
    this.setupSocketEvents();
    
    // Always use real blockchain data 
    setInterval(() => this.updateSamplePrices(), 30000);
    logger.info('Dashboard will use real blockchain data for price updates');
  }
  
  /**
   * Initialize default stats and data
   */
  initializeStats() {
    this.stats = {
      totalOpportunities: 0,
      profitableOpportunities: 0,
      executedArbitrages: 0,
      failedArbitrages: 0,
      totalProfit: '0',
      successRate: 0,
      mevStats: {
        backrunsDetected: 0,
        sandwichesDetected: 0,
        backrunsExecuted: 0,
        sandwichesExecuted: 0,
        hourlyProfit: '0'
      },
      safetyStatus: {
        cooldown: {
          active: false,
          consecutiveFailures: 0,
          remainingTimeMinutes: 0
        },
        network: {
          congested: false,
          currentGasPrice: 0,
          baselineGasPrice: 0,
          gasSpikeFactor: 2.5
        },
        competitiveBot: {
          detected: false,
          slippageMultiplier: 1.0
        },
        lastUpdated: new Date().toISOString()
      },
      recentTransactions: [],
      profitHistory: [],
      botStatus: 'running',
      walletAddress: process.env.WALLET_ADDRESS || '0xB486...0002',
      lastUpdated: new Date().toISOString()
    };
    
    // Token pair price data
    this.tokenPairPrices = {
      'WBNB/BUSD': {
        pancakeswapV2: { 
          price: "N/A", 
          timestamp: new Date(),
          swapFee: 0.25,
          slippage: 0.15,
          gasEstimate: 0.0026,
          feeTier: 'Standard',
          status: "unavailable"
        },
        pancakeswapV3: { 
          price: "N/A", 
          timestamp: new Date(),
          swapFee: 0.30,
          slippage: 0.10,
          gasEstimate: 0.0031,
          feeTier: '0.3% Tier',
          status: "unavailable"
        },
        apeswap: { 
          price: "N/A", 
          timestamp: new Date(),
          swapFee: 0.20,
          slippage: 0.18,
          gasEstimate: 0.0028,
          feeTier: 'Standard',
          status: "unavailable"
        },
        timestamp: new Date()
      },
      'WBNB/USDT': {
        pancakeswapV2: { 
          price: "N/A", 
          timestamp: new Date(),
          swapFee: 0.25,
          slippage: 0.13,
          gasEstimate: 0.0025,
          feeTier: 'Standard',
          status: "unavailable"
        },
        pancakeswapV3: { 
          price: "N/A", 
          timestamp: new Date(),
          swapFee: 0.05,
          slippage: 0.08,
          gasEstimate: 0.0029,
          feeTier: '0.05% Tier',
          status: "unavailable"
        },
        apeswap: { 
          price: "N/A", 
          timestamp: new Date(),
          swapFee: 0.20,
          slippage: 0.16,
          gasEstimate: 0.0027,
          feeTier: 'Standard',
          status: "unavailable"
        },
        timestamp: new Date()
      },
      'CAKE/WBNB': {
        pancakeswapV2: { 
          price: "N/A", 
          timestamp: new Date(),
          swapFee: 0.25,
          slippage: 0.22,
          gasEstimate: 0.0028,
          feeTier: 'Standard',
          status: "unavailable"
        },
        pancakeswapV3: { 
          price: "N/A", 
          timestamp: new Date(),
          swapFee: 1.00,
          slippage: 0.12,
          gasEstimate: 0.0035,
          feeTier: '1% Tier',
          status: "unavailable"
        },
        apeswap: { 
          price: "N/A", 
          timestamp: new Date(),
          swapFee: 0.20,
          slippage: 0.28,
          gasEstimate: 0.0026,
          feeTier: 'Standard',
          status: "unavailable"
        },
        timestamp: new Date()
      },
      'BUSD/USDT': {
        pancakeswapV2: { 
          price: "N/A", 
          timestamp: new Date(),
          swapFee: 0.25,
          slippage: 0.04,
          gasEstimate: 0.0023,
          feeTier: 'Standard',
          status: "unavailable"
        },
        pancakeswapV3: { 
          price: "N/A", 
          timestamp: new Date(),
          swapFee: 0.01,
          slippage: 0.02,
          gasEstimate: 0.0026,
          feeTier: '0.01% Tier',
          status: "unavailable"
        },
        apeswap: { 
          price: "N/A", 
          timestamp: new Date(),
          swapFee: 0.20,
          slippage: 0.05,
          gasEstimate: 0.0025,
          feeTier: 'Standard',
          status: "unavailable"
        },
        timestamp: new Date()
      }
    };
    
    // Initialize empty arbitrage opportunities array
    this.arbitrageOpportunities = [];
  }
  
  /**
   * Set up Express middleware
   */
  setupMiddleware() {
    this.app.use(express.json());
    this.app.use(express.static(path.join(__dirname, 'public')));
    
    // Enable CORS for development
    this.app.use((req, res, next) => {
      res.header('Access-Control-Allow-Origin', '*');
      res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
      next();
    });
  }
  
  /**
   * Set up Express routes
   */
  setupRoutes() {
    // API routes
    this.app.get('/api/stats', (req, res) => {
      res.json({ ...this.stats, lastUpdated: new Date().toISOString() });
    });
    
    this.app.get('/api/prices', (req, res) => {
      res.json({
        prices: this.tokenPairPrices,
        opportunities: this.arbitrageOpportunities,
        timestamp: new Date().toISOString()
      });
    });
    
    this.app.get('/api/config', (req, res) => {
      // Return non-sensitive config settings
      const safeConfig = {
        environment: {
          devMode: config.ENVIRONMENT?.DEV_MODE || false,
          production: config.ENVIRONMENT?.PRODUCTION || true,
          network: config.ENVIRONMENT?.NETWORK || 'BNB Chain'
        },
        mev: {
          enabled: config.MEV?.ENABLED || false,
          protection: {
            enabled: config.MEV?.ENABLED || false, // Use top level MEV.ENABLED
            methods: {
              privateTransactions: config.MEV?.PRIVATE_TX_SERVICE !== null,
              bundleTransactions: config.MEV?.BUNDLE_TRANSACTIONS || false,
              adaptiveGasPrice: config.MEV?.PROTECTION_STRATEGIES?.USE_ADAPTIVE_GAS_PRICE || false
            }
          },
          strategies: {
            enabled: config.MEV?.STRATEGIES?.ENABLED || false,
            backrunning: config.MEV?.STRATEGIES?.BACKRUNNING?.ENABLED || false,
            sandwiching: config.MEV?.STRATEGIES?.SANDWICHING?.ENABLED || false
          }
        },
        monitoring: {
          interval: (config.MONITORING_INTERVAL || 10000) / 1000
        }
      };
      
      res.json(safeConfig);
    });
    
    // Main dashboard route
    this.app.get('/', (req, res) => {
      res.sendFile(path.join(__dirname, 'public', 'index.html'));
    });
    
    // Prices page route
    this.app.get('/prices', (req, res) => {
      res.sendFile(path.join(__dirname, 'public', 'prices.html'));
    });
    
    // Set up route for static files
    this.app.use('/js', express.static(path.join(__dirname, 'public', 'js')));
    
    // Simple catch-all route for other paths
    this.app.use((req, res) => {
      res.redirect('/');
    });
  }
  
  /**
   * Set up Socket.IO events
   */
  setupSocketEvents() {
    this.io.on('connection', (socket) => {
      logger.info(`Dashboard client connected: ${socket.id}`);
      
      // Send initial stats
      socket.emit('stats', this.stats);
      
      // Send initial safety status
      socket.emit('safetyStatus', {
        cooldown: this.stats.safetyStatus.cooldown,
        networkCongestion: this.stats.safetyStatus.network,
        competitiveBots: this.stats.safetyStatus.competitiveBot,
        consecutiveFailures: this.stats.safetyStatus.cooldown.consecutiveFailures,
        lastUpdated: this.stats.safetyStatus.lastUpdated
      });
      
      // Handle price data requests
      socket.on('requestPrices', () => {
        logger.info(`Price data requested by client: ${socket.id}`);
        this.sendPriceUpdates(socket);
      });
      
      socket.on('disconnect', () => {
        logger.info(`Dashboard client disconnected: ${socket.id}`);
      });
    });
  }
  
  /**
   * Start the dashboard server
   */
  start() {
    this.server.listen(this.port, '0.0.0.0', () => {
      logger.info(`Dashboard server running at http://0.0.0.0:${this.port}`);
    });
    return this;
  }
  
  /**
   * Stop the dashboard server
   */
  stop() {
    this.server.close(() => {
      logger.info('Dashboard server stopped');
    });
  }
  
  /**
   * Update performance statistics
   * @param {Object} stats - Updated statistics
   */
  updateStats(stats) {
    // Convert values to strings for JSON serialization
    if (stats.totalProfit) {
      this.stats.totalProfit = stats.totalProfit.toString();
    }
    
    if (stats.mevStats?.hourlyProfit) {
      this.stats.mevStats.hourlyProfit = stats.mevStats.hourlyProfit.toString();
    }
    
    // Update other stats
    this.stats.totalOpportunities = stats.totalOpportunities || this.stats.totalOpportunities;
    this.stats.profitableOpportunities = stats.profitableOpportunities || this.stats.profitableOpportunities;
    this.stats.executedArbitrages = stats.executedArbitrages || this.stats.executedArbitrages;
    this.stats.failedArbitrages = stats.failedArbitrages || this.stats.failedArbitrages;
    
    // Calculate success rate
    const totalExecutions = this.stats.executedArbitrages + this.stats.failedArbitrages;
    this.stats.successRate = totalExecutions > 0 
      ? Math.round((this.stats.executedArbitrages / totalExecutions) * 100) 
      : 0;
    
    // Update MEV stats
    if (stats.mevStats) {
      this.stats.mevStats.backrunsDetected = stats.mevStats.backrunCount || this.stats.mevStats.backrunsDetected;
      this.stats.mevStats.sandwichesDetected = stats.mevStats.sandwichCount || this.stats.mevStats.sandwichesDetected;
      this.stats.mevStats.backrunsExecuted = stats.mevStats.backrunExecuted || this.stats.mevStats.backrunsExecuted;
      this.stats.mevStats.sandwichesExecuted = stats.mevStats.sandwichExecuted || this.stats.mevStats.sandwichesExecuted;
    }
    
    // Update timestamp
    this.stats.lastUpdated = new Date().toISOString();
    
    // Broadcast updates to all connected clients
    this.io.emit('stats', this.stats);
  }

  /**
   * Add a transaction to the recent transactions list
   * @param {Object} transaction - Transaction details
   */
  addTransaction(transaction) {
    // Add transaction to the list
    this.stats.recentTransactions.unshift({
      ...transaction,
      timestamp: new Date().toISOString()
    });
    
    // Keep only the 10 most recent transactions
    if (this.stats.recentTransactions.length > 10) {
      this.stats.recentTransactions.pop();
    }
    
    // Add to profit history for charts
    if (transaction.profit) {
      // Convert profit to a string that BigNumber can handle
      const profit = typeof transaction.profit === 'string' ? 
        transaction.profit : 
        transaction.profit.toString();
        
      this.stats.profitHistory.push({
        timestamp: new Date().toISOString(),
        profit: profit
      });
      
      // Keep profit history for the last 24 hours
      const oneDayAgo = new Date();
      oneDayAgo.setDate(oneDayAgo.getDate() - 1);
      
      this.stats.profitHistory = this.stats.profitHistory.filter(item => 
        new Date(item.timestamp) > oneDayAgo
      );
    }
    
    // Broadcast updates to all connected clients
    this.io.emit('transaction', transaction);
    this.io.emit('stats', this.stats);
  }
  
  /**
   * Update bot status
   * @param {string} status - New status (running, paused, error)
   * @param {string} [message] - Optional status message
   */
  updateBotStatus(status, message) {
    this.stats.botStatus = status;
    if (message) {
      this.stats.statusMessage = message;
    }
    
    // Broadcast updates to all connected clients
    this.io.emit('botStatus', { 
      status: this.stats.botStatus, 
      message: this.stats.statusMessage 
    });
    this.io.emit('stats', this.stats);
  }
  
  /**
   * Update safety status information
   * @param {Object} safetyData - Safety feature status data
   */
  updateSafetyStatus(safetyData) {
    // Update cooldown status
    if (safetyData.cooldown) {
      this.stats.safetyStatus.cooldown = {
        active: safetyData.cooldown.active || false,
        consecutiveFailures: safetyData.cooldown.consecutiveFailures || 0,
        remainingTime: safetyData.cooldown.remainingTime || 0
      };
    }
    
    // Update network congestion status
    if (safetyData.networkCongestion) {
      this.stats.safetyStatus.network = {
        congested: safetyData.networkCongestion.isHighGasPrice || false,
        currentGasPrice: safetyData.networkCongestion.currentGasPrice || 0,
        baselineGasPrice: safetyData.networkCongestion.baselineGasPrice || 0,
        gasSpikeFactor: safetyData.networkCongestion.gasSpikeFactor || 2.5
      };
    }
    
    // Update competitive bot detection status
    if (safetyData.competitiveBots) {
      this.stats.safetyStatus.competitiveBot = {
        detected: safetyData.competitiveBots.detected || false,
        slippageMultiplier: safetyData.competitiveBots.slippageMultiplier || 1.0
      };
    }
    
    // Update last updated timestamp
    this.stats.safetyStatus.lastUpdated = new Date().toISOString();
    
    // Emit the safety status update to all connected clients
    this.io.emit('safetyStatus', {
      cooldown: this.stats.safetyStatus.cooldown,
      networkCongestion: this.stats.safetyStatus.network,
      competitiveBots: this.stats.safetyStatus.competitiveBot,
      consecutiveFailures: this.stats.safetyStatus.cooldown.consecutiveFailures,
      lastUpdated: this.stats.safetyStatus.lastUpdated
    });
    
    // Also update the main stats
    this.io.emit('stats', this.stats);
  }
  
  /**
   * Update Socket.IO routes for price data
   */
  setupPriceSocketEvents() {
    this.io.on('connection', (socket) => {
      // Handle price data requests
      socket.on('requestPrices', () => {
        this.sendPriceUpdates(socket);
      });
    });
  }
  
  /**
   * Send price updates to the connected client
   * @param {Object} socket - Socket.io client socket
   */
  sendPriceUpdates(socket) {
    const data = {
      prices: this.tokenPairPrices,
      opportunities: this.arbitrageOpportunities,
      timestamp: new Date().toISOString()
    };
    
    if (socket) {
      socket.emit('tokenPairPrices', data);
    } else {
      this.io.emit('tokenPairPrices', data);
    }
  }
  
  /**
   * Set all prices to N/A when real data can't be fetched
   */
  setNAForAllPrices() {
    // Loop through all token pairs
    Object.keys(this.tokenPairPrices).forEach(pairName => {
      const pair = this.tokenPairPrices[pairName];
      
      // Set N/A for PancakeSwap V2
      if (pair.pancakeswapV2) {
        pair.pancakeswapV2 = {
          ...pair.pancakeswapV2,
          price: "N/A",
          timestamp: new Date(),
          status: "unavailable"
        };
      }
      
      // Set N/A for PancakeSwap V3
      if (pair.pancakeswapV3) {
        pair.pancakeswapV3 = {
          ...pair.pancakeswapV3,
          price: "N/A",
          timestamp: new Date(),
          status: "unavailable"
        };
      }
      
      // Set N/A for ApeSwap
      if (pair.apeswap) {
        pair.apeswap = {
          ...pair.apeswap,
          price: "N/A",
          timestamp: new Date(),
          status: "unavailable"
        };
      }
      
      // Set N/A for BiSwap if present
      if (pair.biswap) {
        pair.biswap = {
          ...pair.biswap,
          price: "N/A",
          timestamp: new Date(),
          status: "unavailable"
        };
      }
    });
    
    logger.info('Set all prices to N/A due to blockchain connection issues');
  }
  
  /**
   * Update prices from blockchain data
   */
  async updateSamplePrices() {
    try {
      // Always get real price data from blockchain
      logger.info('Fetching real price data from blockchain...');
      const priceData = await priceService.getPriceData();
      
      if (priceData && priceData.prices) {
        // Update our token pair prices with real data
        this.tokenPairPrices = {
          ...priceData.prices
        };
        
        // Make sure fee data is shown correctly in dashboard
        // This is for display purposes only and doesn't affect the trading logic
        this.ensureCorrectFeeDisplay();
        
        logger.info('Updated with real blockchain price data');
      } else {
        logger.error('Failed to get real price data from blockchain');
        // Set prices to N/A for all exchanges when data can't be fetched
        this.setNAForAllPrices();
      }
    } catch (error) {
      logger.error(`Error getting real price data: ${error.message}`);
      // Set prices to N/A for all exchanges when there's an error
      this.setNAForAllPrices();
    }
    
    // Generate arbitrage opportunities based on current prices
    this.updateArbitrageOpportunities();
    
    // Broadcast updates to all connected clients
    this.sendPriceUpdates();
  }
  
  /**
   * Update arbitrage opportunities based on current price data
   */
  updateArbitrageOpportunities() {
    // Clear previous opportunities
    this.arbitrageOpportunities = [];
    
    // Find opportunities based on price differences
    Object.entries(this.tokenPairPrices).forEach(([pairName, pairData]) => {
      const prices = [];
      const dexes = [];
      
      // Skip tokens with N/A prices
      if (pairData.pancakeswapV2 && pairData.pancakeswapV2.price !== "N/A") {
        prices.push(pairData.pancakeswapV2.price);
        dexes.push('PancakeSwap V2');
      }
      
      if (pairData.pancakeswapV3 && pairData.pancakeswapV3.price !== "N/A") {
        prices.push(pairData.pancakeswapV3.price);
        dexes.push('PancakeSwap V3');
      }
      
      if (pairData.apeswap && pairData.apeswap.price !== "N/A") {
        prices.push(pairData.apeswap.price);
        dexes.push('ApeSwap');
      }
      
      // Need at least 2 prices to find an opportunity
      if (prices.length < 2) return;
      
      // Find min and max prices
      const minPrice = Math.min(...prices);
      const maxPrice = Math.max(...prices);
      const minIndex = prices.indexOf(minPrice);
      const maxIndex = prices.indexOf(maxPrice);
      
      // Calculate price difference as percentage
      const priceDiff = (maxPrice - minPrice) / minPrice;
      
      // If difference is significant (>0.5%), create an opportunity
      if (priceDiff > 0.005) {
        // Parse pair name to get tokens
        const [tokenA, tokenB] = pairName.split('/');
        
        // Create an arbitrage opportunity object
        const opportunity = {
          pair: pairName,
          buyDex: dexes[minIndex],
          sellDex: dexes[maxIndex],
          startToken: tokenB,
          midToken: tokenA,
          endToken: tokenB,
          startAmount: 1,
          midAmount: 1 / minPrice,
          endAmount: (1 / minPrice) * maxPrice,
          profitPercent: priceDiff * 100,
          estimatedProfit: ((1 / minPrice) * maxPrice - 1) * 0.2, // Estimated profit in BNB
          timestamp: new Date().toISOString(),
          dex1: dexes[minIndex],
          dex2: dexes[maxIndex],
          gasCost: 0.002 + Math.random() * 0.001
        };
        
        this.arbitrageOpportunities.push(opportunity);
      }
    });
    
    // Sort opportunities by profit
    this.arbitrageOpportunities.sort((a, b) => b.estimatedProfit - a.estimatedProfit);
    
    // Keep only top 3 opportunities
    if (this.arbitrageOpportunities.length > 3) {
      this.arbitrageOpportunities = this.arbitrageOpportunities.slice(0, 3);
    }
  }
  
  /**
   * Ensure correct fee display in dashboard for demonstration purposes
   * This is display-only and doesn't affect actual trading operations
   */
  ensureCorrectFeeDisplay() {
    // Define the correct fees for specific token pairs according to PancakeSwap V3
    const feeDisplayMap = {
      'WBNB/BUSD': { swapFee: 0.015, feeTier: '0.015% Tier' },
      'WBNB/USDT': { swapFee: 0.015, feeTier: '0.015% Tier' },
      'BUSD/USDT': { swapFee: 0.015, feeTier: '0.015% Tier' },
      'CAKE/WBNB': { swapFee: 0.16, feeTier: '0.16% Tier' }
    };

    // For each token pair we're tracking
    Object.keys(this.tokenPairPrices).forEach(pairName => {
      // If this is a pair with a designated fee
      if (feeDisplayMap[pairName]) {
        // Create pancakeswapV3 object if it doesn't exist
        if (!this.tokenPairPrices[pairName].pancakeswapV3) {
          // Clone V2 data as a base
          if (this.tokenPairPrices[pairName].pancakeswapV2) {
            this.tokenPairPrices[pairName].pancakeswapV3 = {
              ...this.tokenPairPrices[pairName].pancakeswapV2,
              timestamp: new Date().toISOString()
            };
          }
        }
        
        // Update the fee display values if pancakeswapV3 exists
        if (this.tokenPairPrices[pairName].pancakeswapV3) {
          this.tokenPairPrices[pairName].pancakeswapV3.swapFee = feeDisplayMap[pairName].swapFee;
          this.tokenPairPrices[pairName].pancakeswapV3.feeTier = feeDisplayMap[pairName].feeTier;
        }
      }
    });
  }
}

// Export a singleton instance
const dashboardServer = new DashboardServer();

module.exports = dashboardServer;
